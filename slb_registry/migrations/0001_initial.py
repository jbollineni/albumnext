# Generated by Django 5.0.7 on 2024-09-25 17:06

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("device_inventory", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="BackendInfo",
            fields=[
                (
                    "backend_uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("backend_handle", models.SlugField(primary_key=True, serialize=False)),
                ("load_balancing_mode", models.CharField(max_length=20)),
                (
                    "first_discovery_datetime",
                    models.DateTimeField(blank=True, default=django.utils.timezone.now),
                ),
                (
                    "last_update_datetime",
                    models.DateTimeField(blank=True, default=django.utils.timezone.now),
                ),
                ("object_db_status", models.CharField(default="active", max_length=10)),
                (
                    "device_fqdn",
                    models.ForeignKey(
                        blank=True,
                        default="placeholder",
                        limit_choices_to={"object_db_status": "active"},
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="device_inventory.deviceinfo",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FrontendInfo",
            fields=[
                (
                    "frontend_uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "frontend_handle",
                    models.SlugField(primary_key=True, serialize=False),
                ),
                ("listener_address", models.CharField(max_length=39)),
                (
                    "address_type",
                    models.CharField(
                        choices=[("ipv4", "ipv4"), ("ipv6", "ipv6")], max_length=4
                    ),
                ),
                (
                    "port",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(65535),
                        ]
                    ),
                ),
                (
                    "protocol",
                    models.CharField(
                        choices=[("tcp", "tcp"), ("udp", "udp")], max_length=5
                    ),
                ),
                (
                    "connection_type",
                    models.CharField(
                        choices=[
                            ("full_proxy", "full_proxy"),
                            ("half_proxy", "half_proxy"),
                        ],
                        max_length=20,
                    ),
                ),
                ("admin_state", models.CharField(max_length=10)),
                ("datacenter", models.CharField(blank=True, max_length=10)),
                ("security_zone", models.CharField(blank=True, max_length=10)),
                ("app_inventory_id", models.IntegerField(default=0)),
                ("app_inventory_slug", models.CharField(max_length=30)),
                (
                    "team_distro",
                    models.CharField(
                        max_length=90,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                (
                    "first_discovery_datetime",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "last_update_datetime",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("object_db_status", models.CharField(default="active", max_length=10)),
                (
                    "backend_handle",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"object_db_status": "active"},
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="slb_registry.backendinfo",
                    ),
                ),
                (
                    "device_fqdn",
                    models.ForeignKey(
                        default="placeholder",
                        limit_choices_to={"object_db_status": "active"},
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="device_inventory.deviceinfo",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HealthCheckInfo",
            fields=[
                (
                    "healthcheck_uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "healthcheck_handle",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                (
                    "healthcheck_type",
                    models.CharField(
                        choices=[
                            ("tcp", "tcp"),
                            ("http", "http"),
                            ("https", "https"),
                            ("mysql", "mysql"),
                        ],
                        default="tcp",
                        max_length=20,
                    ),
                ),
                (
                    "interval",
                    models.PositiveIntegerField(help_text="Check interval in seconds"),
                ),
                (
                    "timeout",
                    models.PositiveIntegerField(help_text="Timeout in seconds"),
                ),
                (
                    "send_string",
                    models.CharField(help_text="String to send", max_length=255),
                ),
                (
                    "receive_string",
                    models.CharField(help_text="Expected response", max_length=255),
                ),
                (
                    "healthcheck_port",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(65535),
                        ]
                    ),
                ),
                ("object_db_status", models.CharField(default="active", max_length=10)),
                (
                    "device_fqdn",
                    models.ForeignKey(
                        blank=True,
                        default="placeholder",
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="device_inventory.deviceinfo",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="backendinfo",
            name="healthcheck_handle",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="slb_registry.healthcheckinfo",
            ),
        ),
        migrations.CreateModel(
            name="BackendMembers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip_address", models.GenericIPAddressField()),
                (
                    "port",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(65535),
                        ]
                    ),
                ),
                ("weight", models.PositiveIntegerField(default=1)),
                ("priority", models.PositiveIntegerField(default=0)),
                ("admin_state", models.BooleanField(default="enabled")),
                ("health_status", models.CharField(default="available", max_length=10)),
                (
                    "backend_handle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="members",
                        to="slb_registry.backendinfo",
                    ),
                ),
            ],
            options={
                "unique_together": {("backend_handle", "ip_address", "port")},
            },
        ),
    ]
